pipeline {
    agent any
     environment {
         DOCKERFILE_NAME = "Dockerfile"
         DOCKER_DIR = "./docker/buildapp"
         DOCKER_IMAGE = "ic-webapp"
         DOCKER_TAG = "1.0"
         DOCKERHUB_ID = "eyaalimi"
         DOCKERHUB_PASSWORD = credentials('dockerhub_password')
         PORT_APP = "8080"
         PORT_EXT = "8090"
         IP = "172.17.0.1"

     }
    stages {
         stage('Build Image'){
             steps{
                 script {
                     sh '''
                         docker build --no-cache -f ${DOCKER_DIR}/${DOCKERFILE_NAME} -t ${DOCKERHUB_ID}/${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_DIR}/.
                     '''
                 }
             }
         }
          stage('Run and Test'){
             steps{
                 script {
                     sh '''
                         docker ps -a | grep -i ${DOCKER_IMAGE} && docker rm -f  ${DOCKER_IMAGE}
                         docker run --name ${DOCKER_IMAGE} -dp $PORT_EXT:$PORT_APP ${DOCKERHUB_ID}/${DOCKER_IMAGE}:${DOCKER_TAG}
                        sleep 5
                         curl -I http://$IP:$PORT_EXT | grep -i "200"
                     '''
                 }
             }
         }
         stage('Stop and Delete Container') {
             steps{
                 script {
                     sh '''
                         docker ps -a | grep -i ${DOCKER_IMAGE} && docker rm -f  ${DOCKER_IMAGE}
                     '''
                 }
             }
         }
         stage('Login and Push Image'){
             steps{
                 script {
                     sh '''
                         echo $DOCKERHUB_PASSWORD | docker login -u ${DOCKERHUB_ID} --password-stdin
                         docker push ${DOCKERHUB_ID}/${DOCKER_IMAGE}:${DOCKER_TAG}
                     '''
                 }
             }
         }

///////////////////////////////// **DOCKER"""   /////////////////////////////////////////////
        //  stage('Build Docker EC2'){
        //      environment{
        //          AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
        //          AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        //      }
        //      agent {
        //          docker {
        //              image 'jenkins/jnlp-agent-terraform'
        //          }
        //      }
        //      steps{
        //          script {
        //              sh '''
        //                  AWS_DIR="/tmp/.aws"
        //                  mkdir -p "$AWS_DIR"
        //                  echo "[default]" > "$AWS_DIR/credentials"
        //                  echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> "$AWS_DIR/credentials"
        //                  echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> "$AWS_DIR/credentials"
        //                  chmod 400 "$AWS_DIR/credentials"

        //                 export AWS_SHARED_CREDENTIALS_FILE="$AWS_DIR/credentials"

        //                  cd terraform/
        //                  terraform init
        //                 terraform apply -var="stack=docker" -auto-approve
        //              '''
        //          }
        //      }
        //  }
        


        //  stage ('Checkfile for docker'){
        //     agent { docker { image 'alpine:latest'}}
        //     steps {
        //         script {
        //             sh '''
        //                echo "checking file stage .." 
        //                cat "ansible/host_vars/docker.yml"
        //             '''
        //         }
        //     }
        //  }
      
//           stage('deploy on docker instance') {
//     steps {
//         input message: "Confirmer vous le deploiement Sur l'instance Docker ?", ok: 'Yes'
//     }
// }
// stage('ansible deploy on Docker instance') {
//     agent {
//         docker {
//             image 'registry.gitlab.com/robconnolly/docker-ansible:latest'
//             args '-v /path/to/terraform/keypair:/terraform/keypair'
//         }
//     }
//     steps {
//         script {
//             // Définir les variables d'environnement pour Ansible
//             env.DEFAULT_LOCAL_TMP = "${WORKSPACE}/ansible_tmp"
//             env.HOME = "${WORKSPACE}"

//             // Créer le répertoire temporaire pour Ansible si nécessaire
//             sh 'mkdir -p ${DEFAULT_LOCAL_TMP}'

//             // Lancer la commande ansible avec les variables d'environnement
//             sh """
//                 echo 'Ansible version:'
//                 ansible --version

//                 echo 'Ping Docker instance:'
//                 ansible docker -m ping --private-key /terraform/keypair/docker.pem

//                 echo 'Deploy with Ansible Playbook:'
//                 ansible-playbook -i /var/jenkins_home/workspace/apppfa@2/ansible/inventory.yml /var/jenkins_home/workspace/apppfa@2/ansible/playbooks/docker/main.yml
//                 """
//         }
//     }
// }





          stage('Destroy Docker EC2'){
              environment{
                  AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
                  AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
              }
              agent {
                  docker {
                      image 'jenkins/jnlp-agent-terraform'
                  }
              }
              steps{
                  script {
                      timeout(time:30, unit: "MINUTES"){
                          input message: "Confirmer la suppression de l'instance Docker", ok: 'YES'
                      }
                      sh '''
                          AWS_DIR="/tmp/.aws"
                          mkdir -p "$AWS_DIR"

                          echo "[default]" > "$AWS_DIR/credentials"
                          echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> "$AWS_DIR/credentials"
                          echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> "$AWS_DIR/credentials"
                          chmod 400 "$AWS_DIR/credentials"

                          export AWS_SHARED_CREDENTIALS_FILE="$AWS_DIR/credentials"
                          
                          cd terraform/
                          terraform destroy -var="stack=docker" -auto-approve
                      '''
                  }
              }
          }
         stage('Build k3s EC2'){
             environment{
                 AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
                 AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
             }
             agent {
                 docker {
                     image 'jenkins/jnlp-agent-terraform'
                 }
             }
             steps{
                 script {
                     sh '''
                         AWS_DIR="/tmp/.aws"
                          mkdir -p "$AWS_DIR"

                          echo "[default]" > "$AWS_DIR/credentials"
                          echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> "$AWS_DIR/credentials"
                          echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> "$AWS_DIR/credentials"
                          chmod 400 "$AWS_DIR/credentials"

                          export AWS_SHARED_CREDENTIALS_FILE="$AWS_DIR/credentials"
                         cd terraform/
                         terraform init 
                         terraform apply -var="stack=kubernetes" -auto-approve
                     '''
                 }
             }
         }
        
          stage('ansible deploy on  kubernetes'){
            agent {
                docker {
                    image  'registry.gitlab.com/robconnolly/docker-ansible:latest'
                }
            }
            steps{
                script {
                    sh '''
                        cat  "ansible/host_vars/k3s.yml"
                        cd "ansible/"
                        ansible k3s -m ping --private-key ../terraform/keypair/kubernetes.pem
                        ansible-playbook playbooks/k3s/main.yml --private-key ../terraform/keypair/kubernetes.pem
                    '''
                }
            }
        }
        //  stage('Destroy Kubernetes EC2'){
        //      environment{
        //          AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
        //          AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        //      }
        //      agent {
        //          docker {
        //              image 'jenkins/jnlp-agent-terraform'
        //          }
        //      }
        //      steps{
        //          script {
        //               timeout(timae:30, unit: "MINUTES"){
        //                   input message: "Confirmer la suppression de l'instance Kubernetes", ok: 'YES'
        //               }
        //              sh '''
        //                  mkdir -p ~/.aws
        //                  echo "[default]" > ~/.aws/credentials
        //                  echo -e "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
        //                  echo -e "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
        //                  chmod 400 ~/.aws/credentials
        //                  cd terraform/
        //                  terraform destroy -var="stack=docker" -auto-approve
        //              '''
        //          }
        //      }
        //  }
    }
}